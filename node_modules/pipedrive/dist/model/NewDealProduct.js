"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _BasicDealProduct = _interopRequireDefault(require("./BasicDealProduct"));
var _DealProductUnitDuration = _interopRequireDefault(require("./DealProductUnitDuration"));
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
 * The NewDealProduct model module.
 * @module model/NewDealProduct
 * @version 1.0.0
 */
var NewDealProduct = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>NewDealProduct</code>.
   * @alias module:model/NewDealProduct
   * @implements module:model/BasicDealProduct
   * @param productId {Number} The ID of the product to use
   * @param itemPrice {Number} The price at which this product will be added to the deal
   * @param quantity {Number} Quantity – e.g. how many items of this product will be added to the deal
   */
  function NewDealProduct(productId, itemPrice, quantity) {
    (0, _classCallCheck2["default"])(this, NewDealProduct);
    _BasicDealProduct["default"].initialize(this, productId, itemPrice, quantity);
    NewDealProduct.initialize(this, productId, itemPrice, quantity);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  (0, _createClass2["default"])(NewDealProduct, null, [{
    key: "initialize",
    value: function initialize(obj, productId, itemPrice, quantity) {
      obj['product_id'] = productId;
      obj['item_price'] = itemPrice;
      obj['quantity'] = quantity;
    }

    /**
     * Constructs a <code>NewDealProduct</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NewDealProduct} obj Optional instance to populate.
     * @return {module:model/NewDealProduct} The populated <code>NewDealProduct</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new NewDealProduct();
        _BasicDealProduct["default"].constructFromObject(data, obj);
        if (data.hasOwnProperty('product_id')) {
          obj['product_id'] = _ApiClient["default"].convertToType(data['product_id'], 'Number');
          delete data['product_id'];
        }
        if (data.hasOwnProperty('item_price')) {
          obj['item_price'] = _ApiClient["default"].convertToType(data['item_price'], 'Number');
          delete data['item_price'];
        }
        if (data.hasOwnProperty('quantity')) {
          obj['quantity'] = _ApiClient["default"].convertToType(data['quantity'], 'Number');
          delete data['quantity'];
        }
        if (data.hasOwnProperty('discount')) {
          obj['discount'] = _ApiClient["default"].convertToType(data['discount'], 'Number');
          delete data['discount'];
        }
        if (data.hasOwnProperty('discount_type')) {
          obj['discount_type'] = _ApiClient["default"].convertToType(data['discount_type'], 'String');
          delete data['discount_type'];
        }
        if (data.hasOwnProperty('duration')) {
          obj['duration'] = _ApiClient["default"].convertToType(data['duration'], 'Number');
          delete data['duration'];
        }
        if (data.hasOwnProperty('duration_unit')) {
          obj['duration_unit'] = _ApiClient["default"].convertToType(data['duration_unit'], _DealProductUnitDuration["default"]);
          delete data['duration_unit'];
        }
        if (data.hasOwnProperty('product_variation_id')) {
          obj['product_variation_id'] = _ApiClient["default"].convertToType(data['product_variation_id'], 'Number');
          delete data['product_variation_id'];
        }
        if (data.hasOwnProperty('comments')) {
          obj['comments'] = _ApiClient["default"].convertToType(data['comments'], 'String');
          delete data['comments'];
        }
        if (data.hasOwnProperty('tax')) {
          obj['tax'] = _ApiClient["default"].convertToType(data['tax'], 'Number');
          delete data['tax'];
        }
        if (data.hasOwnProperty('tax_method')) {
          obj['tax_method'] = _ApiClient["default"].convertToType(data['tax_method'], 'String');
          delete data['tax_method'];
        }
        if (data.hasOwnProperty('enabled_flag')) {
          obj['enabled_flag'] = _ApiClient["default"].convertToType(data['enabled_flag'], 'Boolean');
          delete data['enabled_flag'];
        }
        if (Object.keys(data).length > 0) {
          Object.assign(obj, data);
        }
      }
      return obj;
    }
  }]);
  return NewDealProduct;
}();
/**
 * The ID of the product to use
 * @member {Number} product_id
 */
NewDealProduct.prototype['product_id'] = undefined;

/**
 * The price at which this product will be added to the deal
 * @member {Number} item_price
 */
NewDealProduct.prototype['item_price'] = undefined;

/**
 * Quantity – e.g. how many items of this product will be added to the deal
 * @member {Number} quantity
 */
NewDealProduct.prototype['quantity'] = undefined;

/**
 * The value of the discount. The `discount_type` field can be used to specify whether the value is an amount or a percentage.
 * @member {Number} discount
 * @default 0
 */
NewDealProduct.prototype['discount'] = 0;

/**
 * The type of the discount's value.
 * @member {module:model/NewDealProduct.DiscountTypeEnum} discount_type
 * @default 'percentage'
 */
NewDealProduct.prototype['discount_type'] = 'percentage';

/**
 * The duration of the product. If omitted, will be set to 1.
 * @member {Number} duration
 * @default 1
 */
NewDealProduct.prototype['duration'] = 1;

/**
 * The unit duration of the product
 * @member {module:model/DealProductUnitDuration} duration_unit
 */
NewDealProduct.prototype['duration_unit'] = undefined;

/**
 * The ID of the product variation to use. When omitted, no variation will be used.
 * @member {Number} product_variation_id
 */
NewDealProduct.prototype['product_variation_id'] = undefined;

/**
 * A textual comment associated with this product-deal attachment
 * @member {String} comments
 */
NewDealProduct.prototype['comments'] = undefined;

/**
 * The tax percentage
 * @member {Number} tax
 * @default 0
 */
NewDealProduct.prototype['tax'] = 0;

/**
 * The tax option to be applied to the products. When using `inclusive`, the tax percentage will already be included in the price. When using `exclusive`, the tax will not be included in the price. When using `none`, no tax will be added. Use the `tax` field for defining the tax percentage amount. By default, the user setting value for tax options will be used. Changing this in one product affects the rest of the products attached to the deal.
 * @member {module:model/NewDealProduct.TaxMethodEnum} tax_method
 */
NewDealProduct.prototype['tax_method'] = undefined;

/**
 * Whether the product is enabled for a deal or not. This makes it possible to add products to a deal with a specific price and discount criteria, but keep them disabled, which refrains them from being included in the deal value calculation. When omitted, the product will be marked as enabled by default.
 * @member {Boolean} enabled_flag
 * @default true
 */
NewDealProduct.prototype['enabled_flag'] = true;

// Implement BasicDealProduct interface:
/**
 * The ID of the product to use
 * @member {Number} product_id
 */
_BasicDealProduct["default"].prototype['product_id'] = undefined;
/**
 * The price at which this product will be added to the deal
 * @member {Number} item_price
 */
_BasicDealProduct["default"].prototype['item_price'] = undefined;
/**
 * Quantity – e.g. how many items of this product will be added to the deal
 * @member {Number} quantity
 */
_BasicDealProduct["default"].prototype['quantity'] = undefined;
/**
 * The value of the discount. The `discount_type` field can be used to specify whether the value is an amount or a percentage.
 * @member {Number} discount
 * @default 0
 */
_BasicDealProduct["default"].prototype['discount'] = 0;
/**
 * The type of the discount's value.
 * @member {module:model/BasicDealProduct.DiscountTypeEnum} discount_type
 * @default 'percentage'
 */
_BasicDealProduct["default"].prototype['discount_type'] = 'percentage';
/**
 * The duration of the product. If omitted, will be set to 1.
 * @member {Number} duration
 * @default 1
 */
_BasicDealProduct["default"].prototype['duration'] = 1;
/**
 * The unit duration of the product
 * @member {module:model/DealProductUnitDuration} duration_unit
 */
_BasicDealProduct["default"].prototype['duration_unit'] = undefined;
/**
 * The ID of the product variation to use. When omitted, no variation will be used.
 * @member {Number} product_variation_id
 */
_BasicDealProduct["default"].prototype['product_variation_id'] = undefined;
/**
 * A textual comment associated with this product-deal attachment
 * @member {String} comments
 */
_BasicDealProduct["default"].prototype['comments'] = undefined;
/**
 * The tax percentage
 * @member {Number} tax
 * @default 0
 */
_BasicDealProduct["default"].prototype['tax'] = 0;
/**
 * The tax option to be applied to the products. When using `inclusive`, the tax percentage will already be included in the price. When using `exclusive`, the tax will not be included in the price. When using `none`, no tax will be added. Use the `tax` field for defining the tax percentage amount. By default, the user setting value for tax options will be used. Changing this in one product affects the rest of the products attached to the deal.
 * @member {module:model/BasicDealProduct.TaxMethodEnum} tax_method
 */
_BasicDealProduct["default"].prototype['tax_method'] = undefined;
/**
 * Whether the product is enabled for a deal or not. This makes it possible to add products to a deal with a specific price and discount criteria, but keep them disabled, which refrains them from being included in the deal value calculation. When omitted, the product will be marked as enabled by default.
 * @member {Boolean} enabled_flag
 * @default true
 */
_BasicDealProduct["default"].prototype['enabled_flag'] = true;

/**
 * Allowed values for the <code>discount_type</code> property.
 * @enum {String}
 * @readonly
 */
NewDealProduct['DiscountTypeEnum'] = {
  /**
   * value: "percentage"
   * @const
   */
  "percentage": "percentage",
  /**
   * value: "amount"
   * @const
   */
  "amount": "amount"
};

/**
 * Allowed values for the <code>tax_method</code> property.
 * @enum {String}
 * @readonly
 */
NewDealProduct['TaxMethodEnum'] = {
  /**
   * value: "exclusive"
   * @const
   */
  "exclusive": "exclusive",
  /**
   * value: "inclusive"
   * @const
   */
  "inclusive": "inclusive",
  /**
   * value: "none"
   * @const
   */
  "none": "none"
};
var _default = NewDealProduct;
exports["default"] = _default;