"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _PermissionSets = _interopRequireDefault(require("../model/PermissionSets"));
var _SinglePermissionSetsItem = _interopRequireDefault(require("../model/SinglePermissionSetsItem"));
var _UserAssignmentsToPermissionSet = _interopRequireDefault(require("../model/UserAssignmentsToPermissionSet"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
/**
* PermissionSets service.
* @module api/PermissionSetsApi
* @version 1.0.0
*/
var PermissionSetsApi = /*#__PURE__*/function () {
  /**
  * Constructs a new PermissionSetsApi. 
  * @alias module:api/PermissionSetsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function PermissionSetsApi(apiClient) {
    (0, _classCallCheck2["default"])(this, PermissionSetsApi);
    this.apiClient = apiClient;
  }

  /**
   * Get one permission set
   * Returns data about a specific permission set.
   * @param {String} id The ID of the permission set
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SinglePermissionSetsItem} and HTTP response
   */
  (0, _createClass2["default"])(PermissionSetsApi, [{
    key: "getPermissionSetWithHttpInfo",
    value: function getPermissionSetWithHttpInfo(id) {
      var opts = {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPermissionSet");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var formParamArray = [];
      var contentTypes = [];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');
      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }
      var authNames = ['api_key', 'oauth2'];
      var accepts = ['application/json'];
      var returnType = _SinglePermissionSetsItem["default"];
      return this.apiClient.callApi('/permissionSets/{id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get one permission set
     * Returns data about a specific permission set.
     * @param {String} id The ID of the permission set
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SinglePermissionSetsItem}
     */
  }, {
    key: "getPermissionSet",
    value: function getPermissionSet(id) {
      return this.getPermissionSetWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data;
      });
    }

    /**
     * List permission set assignments
     * Returns the list of assignments for a permission set.
     * @param {String} id The ID of the permission set
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Pagination start (default to 0)
     * @param {Number} opts.limit Items shown per page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserAssignmentsToPermissionSet} and HTTP response
     */
  }, {
    key: "getPermissionSetAssignmentsWithHttpInfo",
    value: function getPermissionSetAssignmentsWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPermissionSetAssignments");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {
        'start': opts['start'] === undefined ? opts['start'] : opts['start'],
        'limit': opts['limit'] === undefined ? opts['limit'] : opts['limit']
      };
      var headerParams = {};
      var formParams = {};
      var formParamArray = [];
      var contentTypes = [];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');
      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }
      var authNames = ['api_key', 'oauth2'];
      var accepts = ['application/json'];
      var returnType = _UserAssignmentsToPermissionSet["default"];
      return this.apiClient.callApi('/permissionSets/{id}/assignments', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List permission set assignments
     * Returns the list of assignments for a permission set.
     * @param {String} id The ID of the permission set
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Pagination start (default to 0)
     * @param {Number} opts.limit Items shown per page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserAssignmentsToPermissionSet}
     */
  }, {
    key: "getPermissionSetAssignments",
    value: function getPermissionSetAssignments(id, opts) {
      return this.getPermissionSetAssignmentsWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data;
      });
    }

    /**
     * Get all permission sets
     * Returns data about all permission sets.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.app The app to filter the permission sets by
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PermissionSets} and HTTP response
     */
  }, {
    key: "getPermissionSetsWithHttpInfo",
    value: function getPermissionSetsWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'app': opts['app'] === undefined ? opts['app'] : opts['app']
      };
      var headerParams = {};
      var formParams = {};
      var formParamArray = [];
      var contentTypes = [];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');
      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }
      var authNames = ['api_key', 'oauth2'];
      var accepts = ['application/json'];
      var returnType = _PermissionSets["default"];
      return this.apiClient.callApi('/permissionSets', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get all permission sets
     * Returns data about all permission sets.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.app The app to filter the permission sets by
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PermissionSets}
     */
  }, {
    key: "getPermissionSets",
    value: function getPermissionSets(opts) {
      return this.getPermissionSetsWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data;
      });
    }
  }]);
  return PermissionSetsApi;
}();
exports["default"] = PermissionSetsApi;