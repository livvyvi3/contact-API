"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
 * The ActivityCollectionResponseObjectAllOf model module.
 * @module model/ActivityCollectionResponseObjectAllOf
 * @version 1.0.0
 */
var ActivityCollectionResponseObjectAllOf = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>ActivityCollectionResponseObjectAllOf</code>.
   * @alias module:model/ActivityCollectionResponseObjectAllOf
   */
  function ActivityCollectionResponseObjectAllOf() {
    (0, _classCallCheck2["default"])(this, ActivityCollectionResponseObjectAllOf);
    ActivityCollectionResponseObjectAllOf.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  (0, _createClass2["default"])(ActivityCollectionResponseObjectAllOf, null, [{
    key: "initialize",
    value: function initialize(obj) {}

    /**
     * Constructs a <code>ActivityCollectionResponseObjectAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ActivityCollectionResponseObjectAllOf} obj Optional instance to populate.
     * @return {module:model/ActivityCollectionResponseObjectAllOf} The populated <code>ActivityCollectionResponseObjectAllOf</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new ActivityCollectionResponseObjectAllOf();
        if (data.hasOwnProperty('id')) {
          obj['id'] = _ApiClient["default"].convertToType(data['id'], 'Number');
          delete data['id'];
        }
        if (data.hasOwnProperty('done')) {
          obj['done'] = _ApiClient["default"].convertToType(data['done'], 'Boolean');
          delete data['done'];
        }
        if (data.hasOwnProperty('subject')) {
          obj['subject'] = _ApiClient["default"].convertToType(data['subject'], 'String');
          delete data['subject'];
        }
        if (data.hasOwnProperty('type')) {
          obj['type'] = _ApiClient["default"].convertToType(data['type'], 'String');
          delete data['type'];
        }
        if (data.hasOwnProperty('user_id')) {
          obj['user_id'] = _ApiClient["default"].convertToType(data['user_id'], 'Number');
          delete data['user_id'];
        }
        if (data.hasOwnProperty('busy_flag')) {
          obj['busy_flag'] = _ApiClient["default"].convertToType(data['busy_flag'], 'Boolean');
          delete data['busy_flag'];
        }
        if (data.hasOwnProperty('company_id')) {
          obj['company_id'] = _ApiClient["default"].convertToType(data['company_id'], 'Number');
          delete data['company_id'];
        }
        if (data.hasOwnProperty('conference_meeting_client')) {
          obj['conference_meeting_client'] = _ApiClient["default"].convertToType(data['conference_meeting_client'], 'String');
          delete data['conference_meeting_client'];
        }
        if (data.hasOwnProperty('conference_meeting_url')) {
          obj['conference_meeting_url'] = _ApiClient["default"].convertToType(data['conference_meeting_url'], 'String');
          delete data['conference_meeting_url'];
        }
        if (data.hasOwnProperty('conference_meeting_id')) {
          obj['conference_meeting_id'] = _ApiClient["default"].convertToType(data['conference_meeting_id'], 'String');
          delete data['conference_meeting_id'];
        }
        if (data.hasOwnProperty('add_time')) {
          obj['add_time'] = _ApiClient["default"].convertToType(data['add_time'], 'String');
          delete data['add_time'];
        }
        if (data.hasOwnProperty('marked_as_done_time')) {
          obj['marked_as_done_time'] = _ApiClient["default"].convertToType(data['marked_as_done_time'], 'String');
          delete data['marked_as_done_time'];
        }
        if (data.hasOwnProperty('active_flag')) {
          obj['active_flag'] = _ApiClient["default"].convertToType(data['active_flag'], 'Boolean');
          delete data['active_flag'];
        }
        if (data.hasOwnProperty('update_time')) {
          obj['update_time'] = _ApiClient["default"].convertToType(data['update_time'], 'String');
          delete data['update_time'];
        }
        if (data.hasOwnProperty('update_user_id')) {
          obj['update_user_id'] = _ApiClient["default"].convertToType(data['update_user_id'], 'Number');
          delete data['update_user_id'];
        }
        if (data.hasOwnProperty('source_timezone')) {
          obj['source_timezone'] = _ApiClient["default"].convertToType(data['source_timezone'], 'String');
          delete data['source_timezone'];
        }
        if (data.hasOwnProperty('location_subpremise')) {
          obj['location_subpremise'] = _ApiClient["default"].convertToType(data['location_subpremise'], 'String');
          delete data['location_subpremise'];
        }
        if (data.hasOwnProperty('location_street_number')) {
          obj['location_street_number'] = _ApiClient["default"].convertToType(data['location_street_number'], 'String');
          delete data['location_street_number'];
        }
        if (data.hasOwnProperty('location_route')) {
          obj['location_route'] = _ApiClient["default"].convertToType(data['location_route'], 'String');
          delete data['location_route'];
        }
        if (data.hasOwnProperty('location_sublocality')) {
          obj['location_sublocality'] = _ApiClient["default"].convertToType(data['location_sublocality'], 'String');
          delete data['location_sublocality'];
        }
        if (data.hasOwnProperty('location_locality')) {
          obj['location_locality'] = _ApiClient["default"].convertToType(data['location_locality'], 'String');
          delete data['location_locality'];
        }
        if (data.hasOwnProperty('location_admin_area_level_1')) {
          obj['location_admin_area_level_1'] = _ApiClient["default"].convertToType(data['location_admin_area_level_1'], 'String');
          delete data['location_admin_area_level_1'];
        }
        if (data.hasOwnProperty('location_admin_area_level_2')) {
          obj['location_admin_area_level_2'] = _ApiClient["default"].convertToType(data['location_admin_area_level_2'], 'String');
          delete data['location_admin_area_level_2'];
        }
        if (data.hasOwnProperty('location_country')) {
          obj['location_country'] = _ApiClient["default"].convertToType(data['location_country'], 'String');
          delete data['location_country'];
        }
        if (data.hasOwnProperty('location_postal_code')) {
          obj['location_postal_code'] = _ApiClient["default"].convertToType(data['location_postal_code'], 'String');
          delete data['location_postal_code'];
        }
        if (data.hasOwnProperty('location_formatted_address')) {
          obj['location_formatted_address'] = _ApiClient["default"].convertToType(data['location_formatted_address'], 'String');
          delete data['location_formatted_address'];
        }
        if (Object.keys(data).length > 0) {
          Object.assign(obj, data);
        }
      }
      return obj;
    }
  }]);
  return ActivityCollectionResponseObjectAllOf;
}();
/**
 * The ID of the activity, generated when the activity was created
 * @member {Number} id
 */
ActivityCollectionResponseObjectAllOf.prototype['id'] = undefined;

/**
 * Whether the activity is done or not
 * @member {Boolean} done
 */
ActivityCollectionResponseObjectAllOf.prototype['done'] = undefined;

/**
 * The subject of the activity
 * @member {String} subject
 */
ActivityCollectionResponseObjectAllOf.prototype['subject'] = undefined;

/**
 * The type of the activity. This is in correlation with the `key_string` parameter of ActivityTypes.
 * @member {String} type
 */
ActivityCollectionResponseObjectAllOf.prototype['type'] = undefined;

/**
 * The ID of the user whom the activity is assigned to
 * @member {Number} user_id
 */
ActivityCollectionResponseObjectAllOf.prototype['user_id'] = undefined;

/**
 * Marks if the activity is set as 'Busy' or 'Free'. If the flag is set to `true`, your customers will not be able to book that time slot through any Scheduler links. The flag can also be unset. When the value of the flag is unset (`null`), the flag defaults to 'Busy' if it has a time set, and 'Free' if it is an all-day event without specified time.
 * @member {Boolean} busy_flag
 */
ActivityCollectionResponseObjectAllOf.prototype['busy_flag'] = undefined;

/**
 * The user's company ID
 * @member {Number} company_id
 */
ActivityCollectionResponseObjectAllOf.prototype['company_id'] = undefined;

/**
 * The ID of the Marketplace app, which is connected to this activity
 * @member {String} conference_meeting_client
 */
ActivityCollectionResponseObjectAllOf.prototype['conference_meeting_client'] = undefined;

/**
 * The link to join the meeting which is associated with this activity
 * @member {String} conference_meeting_url
 */
ActivityCollectionResponseObjectAllOf.prototype['conference_meeting_url'] = undefined;

/**
 * The meeting ID of the meeting provider (Zoom, MS Teams etc.) that is associated with this activity
 * @member {String} conference_meeting_id
 */
ActivityCollectionResponseObjectAllOf.prototype['conference_meeting_id'] = undefined;

/**
 * The creation date and time of the activity in UTC. Format: YYYY-MM-DD HH:MM:SS.
 * @member {String} add_time
 */
ActivityCollectionResponseObjectAllOf.prototype['add_time'] = undefined;

/**
 * The date and time this activity was marked as done. Format: YYYY-MM-DD HH:MM:SS.
 * @member {String} marked_as_done_time
 */
ActivityCollectionResponseObjectAllOf.prototype['marked_as_done_time'] = undefined;

/**
 * Whether the activity is active or not
 * @member {Boolean} active_flag
 */
ActivityCollectionResponseObjectAllOf.prototype['active_flag'] = undefined;

/**
 * The last update date and time of the activity. Format: YYYY-MM-DD HH:MM:SS.
 * @member {String} update_time
 */
ActivityCollectionResponseObjectAllOf.prototype['update_time'] = undefined;

/**
 * The ID of the user who was the last to update this activity
 * @member {Number} update_user_id
 */
ActivityCollectionResponseObjectAllOf.prototype['update_user_id'] = undefined;

/**
 * The timezone the activity was created in an external calendar
 * @member {String} source_timezone
 */
ActivityCollectionResponseObjectAllOf.prototype['source_timezone'] = undefined;

/**
 * A subfield of the location field. Indicates apartment/suite number.
 * @member {String} location_subpremise
 */
ActivityCollectionResponseObjectAllOf.prototype['location_subpremise'] = undefined;

/**
 * A subfield of the location field. Indicates house number.
 * @member {String} location_street_number
 */
ActivityCollectionResponseObjectAllOf.prototype['location_street_number'] = undefined;

/**
 * A subfield of the location field. Indicates street name.
 * @member {String} location_route
 */
ActivityCollectionResponseObjectAllOf.prototype['location_route'] = undefined;

/**
 * A subfield of the location field. Indicates district/sublocality.
 * @member {String} location_sublocality
 */
ActivityCollectionResponseObjectAllOf.prototype['location_sublocality'] = undefined;

/**
 * A subfield of the location field. Indicates city/town/village/locality.
 * @member {String} location_locality
 */
ActivityCollectionResponseObjectAllOf.prototype['location_locality'] = undefined;

/**
 * A subfield of the location field. Indicates state/county.
 * @member {String} location_admin_area_level_1
 */
ActivityCollectionResponseObjectAllOf.prototype['location_admin_area_level_1'] = undefined;

/**
 * A subfield of the location field. Indicates region.
 * @member {String} location_admin_area_level_2
 */
ActivityCollectionResponseObjectAllOf.prototype['location_admin_area_level_2'] = undefined;

/**
 * A subfield of the location field. Indicates country.
 * @member {String} location_country
 */
ActivityCollectionResponseObjectAllOf.prototype['location_country'] = undefined;

/**
 * A subfield of the location field. Indicates ZIP/postal code.
 * @member {String} location_postal_code
 */
ActivityCollectionResponseObjectAllOf.prototype['location_postal_code'] = undefined;

/**
 * A subfield of the location field. Indicates full/combined address.
 * @member {String} location_formatted_address
 */
ActivityCollectionResponseObjectAllOf.prototype['location_formatted_address'] = undefined;
var _default = ActivityCollectionResponseObjectAllOf;
exports["default"] = _default;